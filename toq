[1mdiff --git a/src/hotspot/share/opto/machnode.cpp b/src/hotspot/share/opto/machnode.cpp[m
[1mindex 938befc8875..c3b3fc81f4a 100644[m
[1m--- a/src/hotspot/share/opto/machnode.cpp[m
[1m+++ b/src/hotspot/share/opto/machnode.cpp[m
[36m@@ -528,6 +528,7 @@[m [mvoid MachNode::dump_spec(outputStream *st) const {[m
     if( C->alias_type(t)->is_volatile() )[m
       st->print(" Volatile!");[m
   }[m
[32m+[m
 }[m
 [m
 //------------------------------dump_format------------------------------------[m
[36m@@ -545,6 +546,10 @@[m [mvoid MachTypeNode::dump_spec(outputStream *st) const {[m
   } else {[m
     st->print(" NULL");[m
   }[m
[32m+[m[32m  uint8_t b = barrier_data();[m
[32m+[m[32m  if (b != 0) {[m
[32m+[m[32m    st->print(" barrier:%i", b);[m
[32m+[m[32m  }[m
 }[m
 #endif[m
 [m
[1mdiff --git a/src/hotspot/share/opto/memnode.cpp b/src/hotspot/share/opto/memnode.cpp[m
[1mindex 0039791f44e..5450f63ec96 100644[m
[1m--- a/src/hotspot/share/opto/memnode.cpp[m
[1m+++ b/src/hotspot/share/opto/memnode.cpp[m
[36m@@ -90,7 +90,10 @@[m [mvoid MemNode::dump_spec(outputStream *st) const {[m
     _adr_type = in(Address)->bottom_type()->isa_ptr();[m
 #endif[m
   dump_adr_type(this, _adr_type, st);[m
[31m-[m
[32m+[m[32m  uint8_t b = as_Mem()->barrier_data();[m
[32m+[m[32m  if (b != 0) {[m
[32m+[m[32m    st->print(" barrier=%i,", b);[m
[32m+[m[32m  }[m
   Compile* C = Compile::current();[m
   if (C->alias_type(_adr_type)->is_volatile()) {[m
     st->print(" Volatile!");[m
[1mdiff --git a/test/hotspot/jtreg/compiler/c2/irTests/barriers/z/TestDomBarrierElision.java b/test/hotspot/jtreg/compiler/c2/irTests/barriers/z/TestDomBarrierElision.java[m
[1mindex de52a31b40b..c3494e45cf1 100644[m
[1m--- a/test/hotspot/jtreg/compiler/c2/irTests/barriers/z/TestDomBarrierElision.java[m
[1m+++ b/test/hotspot/jtreg/compiler/c2/irTests/barriers/z/TestDomBarrierElision.java[m
[36m@@ -67,8 +67,8 @@[m [mpublic class TestDomBarrierElision {[m
     }[m
 [m
     @Test[m
[31m-    @IR(counts = { IRNode.LOAD_P,  "1" })[m
[31m-    //@IR(counts = { IRNode.LOAD_B,  "1" })[m
[32m+[m[32m    @IR(counts = { IRNode.LOAD_P,  "2" })[m
[32m+[m[32m    @IR(counts = { IRNode.LOAD_B,  "1" })[m
     private static Content testBasicLoad(Payload p) {[m
         return p.c;[m
     }[m
[1mdiff --git a/test/hotspot/jtreg/compiler/lib/ir_framework/flag/FlagVM.java b/test/hotspot/jtreg/compiler/lib/ir_framework/flag/FlagVM.java[m
[1mindex 8ab39c02867..ee18af86cd5 100644[m
[1m--- a/test/hotspot/jtreg/compiler/lib/ir_framework/flag/FlagVM.java[m
[1m+++ b/test/hotspot/jtreg/compiler/lib/ir_framework/flag/FlagVM.java[m
[36m@@ -119,7 +119,7 @@[m [mpublic class FlagVM {[m
             cmds.addAll(Arrays.asList(getPrintFlags()));[m
             cmds.add("-XX:+LogCompilation");[m
             cmds.add("-XX:CompileCommand=log," + testClass.getCanonicalName() + "::*");[m
[31m-            addBoolOptionForClass(cmds, testClass, "PrintIdeal");[m
[32m+[m[32m            addIntOptionForClass(cmds, testClass, "PrintIdealLevel", 1);[m
             addBoolOptionForClass(cmds, testClass, "PrintOptoAssembly");[m
             // Always trap for exception throwing to not confuse IR verification[m
             cmds.add("-XX:-OmitStackTraceInFastThrow");[m
[36m@@ -131,6 +131,10 @@[m [mpublic class FlagVM {[m
     }[m
 [m
     private static void addBoolOptionForClass(ArrayList<String> cmds, Class<?> testClass, String option) {[m
[31m-        cmds.add("-XX:CompileCommand=option," + testClass.getCanonicalName() + "::*,bool," + option + ",true");[m
[32m+[m[32m        cmds.add("-XX:CompileCommand=" + option + "," + testClass.getCanonicalName() + "::*");[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private static void addIntOptionForClass(ArrayList<String> cmds, Class<?> testClass, String option, int value) {[m
[32m+[m[32m        cmds.add("-XX:CompileCommand=" + option + "," + testClass.getCanonicalName() + "::*," + value);[m
     }[m
 }[m
